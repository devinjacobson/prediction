function [outputLog] = WriteRaw...
    (fileName, header, eegData, eventData, addEvents, numChans, numSamples, samplingRate, versionNumber);

% Function [outputLog] = writeRaw(fileName, header, eegData, 
%                                 eventData, numChans, numSamples, samplingRate, versionNumber)
% writes blink-corrected EEG data, stored in the array eegData, to the file
% <fileName.raw> along with its corresponding header and, for numEvents > 0, event information.
%
% <fileName.raw> will be an epoch-marked simple-binary format (epoch-marked raw format) file.
%
% Epoch-marked raw format: Unsegmented simple-binary format (raw format,
%                          version # 2, 4 or 6) with event codes <epoc> and <tim0>.
%
% This function is to be used in combination with readRaw, which first parses
% the arrays header, eegData (pre blink-correction) and eventData from an 
% epoch-marked simple-binary format (epoch-marked raw format) file generated by NetStation.
%
% Input Arguments: fileName - Name of the EGI epoch-marked simple-binary format
%                             file originally read by readRaw.
%                             It must be a MATLAB string.
%
%                  header - MATLAB structure containing the header info.
%
%                  eegData - m1 by n array containing the continuous EEG data,
%                            ideally after ICA blink extraction.
%                            m1 = # of channels, n = # of time samples.
%
%                  eventData - m2 by n array containing the corresponding event info.
%                              m2 = # of event types, n = # of time samples.
%
%                  addEvents - logical 1 if user requests default events <epoc> and <tim0>.
%
%                  numChans - # of data channels (detectors).
%
%                  numSamples - # of time samples.
%
%                  samplingRate - the rate of sampling.
%
%                  versionNumber - 2: Integer, 4: single Precion Real, 
%                                  6: Double Precision Real
%
% Output Arguments: outputLog - Character array of relevant steps taken
%                               during program execution.

% Create the EGI epoch-marked raw format data file: <fileName.raw>.

fid = fopen([fileName '.raw'],'w','b');

if (fid == -1)  % File not found.
    
    errorMsg = sprintf('\n!!! File Creation Error: %s !!!\n', [fileName '.raw']); error(errorMsg);
    
end

outputLog = ['OutputFile = <' fileName '.raw>'];   % Seed outputLog.


if (nargin == 9)  % Header file NOT supplied.  Instantiate with user-supplied & default values.
    
    header.versionNumber = versionNumber;
    header.recordingTimeYear = 0;
    header.recordingTimeMonth = 0;
    header.recordingTimeDay = 0;
    header.recordingTimeHour = 0;
    header.recordingTimeMinute = 0;
    header.recordingTimeSecond = 0;
    header.recordingTimeMillisec = 0;
    header.samplingRate = samplingRate;
    header.numChans = numChans;
    header.boardGain = 0;
    header.numConvBits = 0;
    header.ampRange = 0;
    header.numSamples = numSamples;
    if addEvents
        header.numEvents = 2;
        header.eventCodes(1) = {'epoc'};
        header.eventCodes(2) = {'tim0'};
        eventData = zeros(2,numSamples);
        outputLog = strvcat(outputLog, ...
            ['Generated default event codes <epoc> and <tim0> (= 0 for all time samples)']);
    else
        header.numEvents = 0;
    end

end
    
% ---------------- Write the header information to the file. ---------------- 

fwrite(fid, header.versionNumber, 'integer*4');
fwrite(fid, header.recordingTimeYear, 'integer*2');
fwrite(fid, header.recordingTimeMonth, 'integer*2');
fwrite(fid, header.recordingTimeDay, 'integer*2');
fwrite(fid, header.recordingTimeHour, 'integer*2');
fwrite(fid, header.recordingTimeMinute, 'integer*2');
fwrite(fid, header.recordingTimeSecond, 'integer*2');
fwrite(fid, header.recordingTimeMillisec, 'integer*4');
fwrite(fid, header.samplingRate, 'integer*2');
fwrite(fid, header.numChans, 'integer*2');
fwrite(fid, header.boardGain, 'integer*2');
fwrite(fid, header.numConvBits, 'integer*2');
fwrite(fid, header.ampRange, 'integer*2');
fwrite(fid, header.numSamples, 'integer*4');
fwrite(fid, header.numEvents, 'integer*2');

if (header.numEvents ~= 0)  % File contains event info.
    
    for  i = 1:header.numEvents
        
        fwrite(fid, header.eventCodes{i}, 'char');
        
    end
    
end

% ---------------------- Finished writing the header. ----------------------

% Determine precision of data from version #.

switch header.versionNumber
   case 2
       precision = 'integer*2';  % Integer
   case 4
       precision = 'real*4';  % Single Precision Real
   case 6
       precision = 'real*8';  % Double Precision Real
end

%  --------- Write the SSR's and corresponding event records to the file. ---------

if (header.numEvents ~= 0)  % File contains event info.
    
    for j = 1:header.numSamples
        
        fwrite(fid, eegData(:,j), precision);
        fwrite(fid, eventData(:,j), precision);
        
    end
    
else  % File does not contain event info.
    
    fwrite(fid, eegData, precision);
    
end

% Close the file.

fclose(fid);


