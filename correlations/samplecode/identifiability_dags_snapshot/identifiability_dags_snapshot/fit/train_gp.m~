function result = train_gp(X, Y, pars)
% function result = train_gp(X, Y, pars)
%
% Trains a Gaussian Process with RBF kernel regression model.
% See also test_gp, train_template.
%
% INPUT:
%   X         Nxd matrix of training inputs (N data points, d dimensions)
%   Y         Nx1 matrix of training outputs (N data points)
%   pars      structure containing parameters of the regression method
%     .meanf    mean function to use (default: {@meanZero})
%     .covf     covariance function to use (default: {@covSEiso})
%     .FITC     if nonempty, inducing inputs for FITC approximation;
%               should be K*d matrix (default: [])
%     .lik      one of {'likGauss', 'likLaplace', 'likLogistic', 'likT'}
%               default: likGauss
%     .inf      one of {'infExact','infLaplace','infEP','infVB'}
%               default: infExact
%     .maxiter  maximum number of conjugate gradient steps (default: 1000)
%     .hyp      initial hyperparameters (optional)
%
% OUTPUT:
%   result    structure with the result of the regression
%               .model        learned model:
%                 .hyp          optimized hyperparameters
%                 .X            train inputs
%                 .Y            train outputs
%               .Yexp         expected outputs for training inputs according to the learned model
%               .eps          noise values (residuals)
%               .loss         loss function of trained model
%               .Yvar         variance of training outputs according to the learned model
%
% EXAMPLES
%   Some useful mean functions:
%     {@meanZero};
%     {@meanConst};
%     {@meanSum,{@meanLinear,@meanConst}};
%   Some useful covariance functions:
%     {@covSEiso};
%     {@covSEard};
%
% NOTE
%   Uses GPML 3.1 code (which should be in the matlab path)
%
% Copyright (c) 2008-2011  Joris Mooij  [joris.mooij@tuebingen.mpg.de]
% All rights reserved.  See the file COPYING for license terms.

  % if X is empty, return Y as residuals
  if size(X,2)==0
    result.Yfit = zeros(size(Y,1),1);
    result.model.lincoefs = 0;
    result.eps = Y;
    return
  end


  % check input arguments
  if size(Y,2)~=1 | size(X,1)~=size(Y,1)
    error('X should be Nxd and Y should be Nx1');
  end

  % set default parameters
  if ~isfield(pars,'covf')
    pars.covf = {@covSEiso};
  end;
  if ~isfield(pars,'meanf')
    pars.meanf = {@meanZero};
  end
  if ~isfield(pars,'FITC')
    pars.FITC = [];
  end
  if ~isfield(pars,'lik')
    pars.lik = 'likGauss';
  end
  if ~isfield(pars,'inf')
    pars.inf = 'infExact';
  end
  if ~isfield(pars,'maxiter')
    pars.maxiter = 1000;
  end

  % build covariance function
  if ~isempty(pars.FITC)
    covf = {@covFITC, pars.covf, FITC};
  else
    covf = pars.covf;
  end

  % initialize hyperparameters, if none are provided
  if isfield(pars,'hyp')
    hyp = pars.hyp;
  else
    sf  = 1.0;  % sigma_function
    ell = 1.0;  % length scale
    if pars.covf == {@covSEiso}
      hyp.cov = log([ell;sf]);
    elseif pars.covf == {@covSEard}
      hyp.cov = log([ell * ones(size(X,2),1);sf]);
    else
      error('Automatic initialization of hyperparameters not implemented for this covariance function.');
    end

    if pars.meanf == {@meanConst} % m(x) = b
      b = 0.0;
      hyp.mean = b;
    elseif pars.meanf == {@meanSum,{@meanLinear,@meanConst}}; % m(x) = a*x+b
      a = 0.0; b = 0.0;
      hyp.mean = [a;b];
    else
      error('Automatic initialization of hyperparameters not implemented for this mean function.');
    end

    sn  = 0.1;  % sigma_noise
    if strcmp(pars.lik,'likT')
      nu = 4;
      hyp.lik = log([nu-1;sqrt((nu-2)/nu)*sn]);
    else
      hyp.lik = log(sn);
    end
  end

  % learn hyperparameters
  hyp = minimize(hyp,'gp',-pars.maxiter,pars.inf,pars.meanf,covf,pars.lik,X,Y);
  %hyp = minimize_lbfgsb(hyp,'gp',-pars.maxiter,pars.inf,pars.meanf,covf,pars.lik,X,Y);

  % calculate evidence (log marginal likelihood)
  lml = -gp(hyp,pars.inf,pars.meanf,covf,pars.lik,X,Y);

  % calculate fit on training set and assign result fields
  result = struct;
  [result.Yfit,result.Yvar] = gp(hyp,pars.inf,pars.meanf,covf,pars.lik,X,Y,X);  % predict on X
  result.eps = Y - result.Yexp;
  result.loss = -lml;
  result.model = struct;
  result.model.hyp = hyp;
  result.model.X = X;
  result.model.Y = Y;
return
